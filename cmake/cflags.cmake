include(AddCFlagUtils)
include(pertarget)

add_c_compiler_flag(REQUIRED "CSTD" "-std=c99")
add_c_compiler_flag(REQUIRED "CSTD" "-mavx2")
add_c_compiler_flag(REQUIRED "CSTD" "-mfma")
add_c_compiler_flag(REQUIRED "WALL" "-Wall")
add_c_compiler_flag(REQUIRED "WEXTRA" "-Wextra")
add_c_compiler_flag(OPTIONAL "WNO_SWITCH_ENUM" "-Wno-switch-enum")
add_c_compiler_flag(OPTIONAL "WNO_PADDED" "-Wno-padded")
add_c_compiler_flag(OPTIONAL "WNO_UNUSED_LOCAL_TYPEDEFS" "-Wno-unused-local-typedefs")
add_c_compiler_flag(OPTIONAL "WNO_COMPLEX_EXT" "-fext-numeric-literals")
add_c_compiler_flag(OPTIONAL "ALIGN_LOOPS" "-falign-loops")
add_c_compiler_flag(OPTIONAL "UNROLL_LOOPS" "-funroll-loops")
add_c_compiler_flag(OPTIONAL "MARCH" "-march=native")
add_c_compiler_flag(OPTIONAL "STRICT_ALIASING" "-fstrict-aliasing")

if(USE_MIMALLOC)
  add_definitions(-DUSE_MIMALLOC)
  add_c_compiler_flag(REQUIRED "NO-BUILTIN-MALLOC" "-fno-builtin-malloc")
  add_c_compiler_flag(REQUIRED "NO-BUILTIN-CALLOC" "-fno-builtin-calloc")
  add_c_compiler_flag(REQUIRED "NO-BUILTIN-REALLOC" "-fno-builtin-realloc")
  add_c_compiler_flag(REQUIRED "NO-BUILTIN-FREE" "-fno-builtin-free")
endif()

add_definitions(-DFMT_HEADER_ONLY)

if(USE_GPROF)
  add_c_compiler_flag(REQUIRED "PG" "-pg")
  add_c_compiler_linker_flag(REQUIRED "PG" "-pg")
endif()

if ("${CMAKE_C_COMPILER_ID}" STREQUAL "Clang")
  add_c_compiler_flag(OPTIONAL "WEVERYTHING" "-Weverything")
  add_c_compiler_flag(OPTIONAL "WNO_WEAK_VTABLES" "-Wno-weak-vtables")
  add_c_compiler_flag(OPTIONAL "WNO_CXX98_COMPAT" "-Wno-c++98-compat")
  add_c_compiler_flag(OPTIONAL "WNO_CXX98_COMPAT_PEDANTIC" "-Wno-c++98-compat-pedantic")
  add_c_compiler_flag(OPTIONAL "WNO_C99_EXTENSIONS" "-Wno-c99-extensions")
  add_c_compiler_flag(OPTIONAL "WNO_COVERED_SWITCH_DEFAULT" "-Wno-covered-switch-default")
  add_c_compiler_flag(OPTIONAL "WNO_EXIT_TIME_DESTRUCTORS" "-Wno-exit-time-destructors")
  add_c_compiler_flag(OPTIONAL "WNO_GLOBAL_CONSTRUCTORS" "-Wno-global-constructors")
  add_c_compiler_flag(OPTIONAL "WNO_RESERVED_ID_MACRO" "-Wno-reserved-id-macro")
  # using Clang
elseif ("${CMAKE_C_COMPILER_ID}" STREQUAL "GNU")
endif()
